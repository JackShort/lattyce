{"version":3,"sources":["../src/index.js"],"names":["ensureValidPlugins","name","arr","Array","isArray","Error","i","l","length","fn","inflections","postGraphileBaseOverrides","enumName","value","defaultUtils","constantCase","defaultInflection","postGraphileClassicIdsOverrides","column","_table","_schema","camelCase","postGraphileInflection","newInflector","postGraphileClassicIdsInflection","Object","assign","PostGraphileInflectionPlugin","builder","hook","inflection","previous","call","PostGraphileClassicIdsInflectionPlugin","_columnName","attr","options","previousValue","skipRowId","awaitKeys","obj","result","k","getPostGraphileBuilder","pgConfig","schemas","dynamicJson","classicIds","nodeIdFieldName","replaceAllPlugins","appendPlugins","prependPlugins","skipPlugins","jwtPgTypeIdentifier","jwtSecret","disableDefaultMutations","graphileBuildOptions","graphqlBuildOptions","inflector","pgColumnFilter","viewUniqueKey","enableTags","readCache","writeCache","setWriteCacheCallback","legacyRelations","setofFunctionsContainNulls","legacyJsonUuid","simpleCollections","includeExtensionResources","ignoreRBAC","indexOf","JSON","stringify","persistentMemoizeWithKey","undefined","memoizeCache","parse","Promise","resolve","reject","fs","readFile","err","data","key","then","writeFile","inflectionOverridePlugins","defaultPlugins","pgDefaultPlugins","filter","p","pgSchemas","pgExtendedTypes","pgInflection","pgJwtTypeIdentifier","pgJwtSecret","pgDisableDefaultMutations","pgViewUniqueKey","pgEnableTags","pgLegacyRelations","pgLegacyJsonUuid","pgForbidSetofFunctionsToReturnNull","pgSimpleCollections","pgIncludeExtensionResources","pgIgnoreRBAC","abort","e","console","error","process","exit","createPostGraphileSchema","schema","buildSchema","catch","watchPostGraphileSchema","onNewSchema","released","handleNewSchema","args","watchSchema","release","unwatchSchema","postGraphQLBaseOverrides","postGraphQLClassicIdsOverrides","postGraphQLInflection","postGraphQLClassicIdsInflection","createPostGraphQLSchema","watchPostGraphQLSchema"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\nimport fs from \"fs\";\nimport { defaultPlugins, getBuilder } from \"graphile-build\";\nimport {\n  defaultPlugins as pgDefaultPlugins,\n  inflections,\n  Inflector,\n} from \"graphile-build-pg\";\nimport type { Pool, Client } from \"pg\";\nimport type { Plugin, Options, SchemaListener } from \"graphile-build\";\nimport type { Build, Context } from \"graphile-build\";\n\nconst ensureValidPlugins = (name, arr) => {\n  if (!Array.isArray(arr)) {\n    throw new Error(`Option '${name}' should be an array`);\n  }\n  for (let i = 0, l = arr.length; i < l; i++) {\n    const fn = arr[i];\n    if (typeof fn !== \"function\") {\n      throw new Error(\n        `Option '${name}' should be an array of functions, found '${typeof fn}' at index ${i}`\n      );\n    }\n  }\n};\n\ntype PostGraphileOptions = {\n  dynamicJson?: boolean,\n  classicIds?: boolean,\n  disableDefaultMutations?: string,\n  nodeIdFieldName?: string,\n  graphileBuildOptions?: Options,\n  graphqlBuildOptions?: Options, // DEPRECATED!\n  replaceAllPlugins?: Array<Plugin>,\n  appendPlugins?: Array<Plugin>,\n  prependPlugins?: Array<Plugin>,\n  skipPlugins?: Array<Plugin>,\n  jwtPgTypeIdentifier?: string,\n  jwtSecret?: string,\n  inflector?: Inflector, // NO LONGER SUPPORTED!\n  pgColumnFilter?: (mixed, Build, Context) => boolean,\n  viewUniqueKey?: string,\n  enableTags?: boolean,\n  readCache?: string,\n  writeCache?: string,\n  setWriteCacheCallback?: (fn: () => Promise<void>) => void,\n  legacyRelations?: \"only\" | \"deprecated\" | \"omit\",\n  setofFunctionsContainNulls?: boolean,\n  legacyJsonUuid?: boolean,\n  simpleCollections?: \"only\" | \"both\" | \"omit\",\n  includeExtensionResources?: boolean,\n  ignoreRBAC?: boolean,\n};\n\ntype PgConfig = Client | Pool | string;\n\n/*\n * BELOW HERE IS DEPRECATED!!\n */\nexport { inflections };\n\nexport const postGraphileBaseOverrides = {\n  enumName(value: string) {\n    return inflections.defaultUtils.constantCase(\n      inflections.defaultInflection.enumName(value)\n    );\n  },\n};\n\nexport const postGraphileClassicIdsOverrides = {\n  column(name: string, _table: string, _schema: ?string) {\n    return name === \"id\" ? \"rowId\" : inflections.defaultUtils.camelCase(name);\n  },\n};\n\nexport const postGraphileInflection = inflections.newInflector(\n  postGraphileBaseOverrides\n);\n\nexport const postGraphileClassicIdsInflection = inflections.newInflector(\n  Object.assign({}, postGraphileBaseOverrides, postGraphileClassicIdsOverrides)\n);\n/*\n * ABOVE HERE IS DEPRECATED.\n */\n\nexport const PostGraphileInflectionPlugin = (function(builder) {\n  builder.hook(\"inflection\", inflection => {\n    const previous = inflection.enumName;\n    return {\n      ...inflection,\n      enumName(value: string) {\n        return this.constantCase(previous.call(this, value));\n      },\n    };\n  });\n}: Plugin);\n\nexport const PostGraphileClassicIdsInflectionPlugin = (function(builder) {\n  builder.hook(\"inflection\", inflection => {\n    const previous = inflection._columnName;\n    return {\n      ...inflection,\n      _columnName(attr, options) {\n        const previousValue = previous.call(this, attr, options);\n        return (options && options.skipRowId) || previousValue !== \"id\"\n          ? previousValue\n          : this.camelCase(\"rowId\");\n      },\n    };\n  });\n}: Plugin);\n\nconst awaitKeys = async obj => {\n  const result = {};\n  for (const k in obj) {\n    result[k] = await obj[k];\n  }\n  return result;\n};\n\nconst getPostGraphileBuilder = async (\n  pgConfig,\n  schemas,\n  options: PostGraphileOptions = {}\n) => {\n  const {\n    dynamicJson,\n    classicIds,\n    nodeIdFieldName,\n    replaceAllPlugins,\n    appendPlugins = [],\n    prependPlugins = [],\n    skipPlugins = [],\n    jwtPgTypeIdentifier,\n    jwtSecret,\n    disableDefaultMutations,\n    graphileBuildOptions,\n    graphqlBuildOptions, // DEPRECATED!\n    inflector, // NO LONGER SUPPORTED!\n    pgColumnFilter,\n    viewUniqueKey,\n    enableTags = true,\n    readCache,\n    writeCache,\n    setWriteCacheCallback,\n    legacyRelations = \"deprecated\", // TODO: Change to 'omit' in v5\n    setofFunctionsContainNulls = true,\n    legacyJsonUuid = false,\n    simpleCollections = \"omit\",\n    includeExtensionResources = false,\n    ignoreRBAC = true, // TODO: Change to 'false' in v5\n  } = options;\n\n  if (\n    legacyRelations &&\n    [\"only\", \"deprecated\", \"omit\"].indexOf(legacyRelations) < 0\n  ) {\n    throw new Error(\n      \"Invalid configuration for legacy relations: \" +\n        JSON.stringify(legacyRelations)\n    );\n  }\n  if (\n    simpleCollections &&\n    [\"only\", \"both\", \"omit\"].indexOf(simpleCollections) < 0\n  ) {\n    throw new Error(\n      \"Invalid configuration for simple collections: \" +\n        JSON.stringify(simpleCollections)\n    );\n  }\n  if (replaceAllPlugins) {\n    ensureValidPlugins(\"replaceAllPlugins\", replaceAllPlugins);\n    if (\n      (prependPlugins && prependPlugins.length) ||\n      (appendPlugins && appendPlugins.length)\n    ) {\n      throw new Error(\n        \"When using 'replaceAllPlugins' you must not specify 'appendPlugins'/'prependPlugins'\"\n      );\n    }\n  }\n  if (readCache && writeCache) {\n    throw new Error(\"Use `readCache` or `writeCache` - not both.\");\n  }\n\n  let persistentMemoizeWithKey = undefined; // NOT null, otherwise it won't default correctly.\n  let memoizeCache = {};\n\n  if (readCache) {\n    memoizeCache = JSON.parse(\n      await new Promise((resolve, reject) => {\n        fs.readFile(readCache, \"utf8\", (err, data) => {\n          if (err) {\n            reject(err);\n          } else {\n            resolve(data);\n          }\n        });\n      })\n    );\n  }\n  if (readCache || writeCache) {\n    persistentMemoizeWithKey = (key, fn) => {\n      if (!(key in memoizeCache)) {\n        if (readCache) {\n          throw new Error(`Expected cache to contain key: ${key}`);\n        }\n        memoizeCache[key] = fn();\n        if (memoizeCache[key] === undefined) {\n          throw new Error(`Cannot memoize 'undefined' - use 'null' instead`);\n        }\n      }\n      return memoizeCache[key];\n    };\n  }\n\n  if (writeCache && setWriteCacheCallback) {\n    setWriteCacheCallback(() =>\n      awaitKeys(memoizeCache).then(\n        obj =>\n          new Promise((resolve, reject) => {\n            fs.writeFile(writeCache, JSON.stringify(obj), err => {\n              memoizeCache = {};\n              if (err) {\n                reject(err);\n              } else {\n                resolve();\n              }\n            });\n          })\n      )\n    );\n  } else if (writeCache) {\n    throw new Error(\"Cannot write cache without 'setWriteCacheCallback'\");\n  } else if (setWriteCacheCallback) {\n    setWriteCacheCallback(() => Promise.resolve());\n  }\n\n  ensureValidPlugins(\"prependPlugins\", prependPlugins);\n  ensureValidPlugins(\"appendPlugins\", appendPlugins);\n  ensureValidPlugins(\"skipPlugins\", skipPlugins);\n  if (inflector) {\n    throw new Error(\n      \"Custom inflector arguments are no longer supported, please use the inflector plugin API instead\"\n    );\n  }\n  const inflectionOverridePlugins = classicIds\n    ? [PostGraphileInflectionPlugin, PostGraphileClassicIdsInflectionPlugin]\n    : [PostGraphileInflectionPlugin];\n  return getBuilder(\n    (replaceAllPlugins\n      ? [\n          ...prependPlugins,\n          ...replaceAllPlugins,\n          ...inflectionOverridePlugins,\n          ...appendPlugins,\n        ]\n      : [\n          ...prependPlugins,\n          ...defaultPlugins,\n          ...pgDefaultPlugins,\n          ...inflectionOverridePlugins,\n          ...appendPlugins,\n        ]\n    ).filter(p => skipPlugins.indexOf(p) === -1),\n    Object.assign(\n      {\n        pgConfig: pgConfig,\n        pgSchemas: Array.isArray(schemas) ? schemas : [schemas],\n        pgExtendedTypes: !!dynamicJson,\n        pgColumnFilter: pgColumnFilter || (() => true),\n        pgInflection:\n          inflector ||\n          (classicIds\n            ? postGraphileClassicIdsInflection\n            : postGraphileInflection),\n        nodeIdFieldName: nodeIdFieldName || (classicIds ? \"id\" : \"nodeId\"),\n        pgJwtTypeIdentifier: jwtPgTypeIdentifier,\n        pgJwtSecret: jwtSecret,\n        pgDisableDefaultMutations: disableDefaultMutations,\n        pgViewUniqueKey: viewUniqueKey,\n        pgEnableTags: enableTags,\n        pgLegacyRelations: legacyRelations,\n        pgLegacyJsonUuid: legacyJsonUuid,\n        persistentMemoizeWithKey,\n        pgForbidSetofFunctionsToReturnNull: !setofFunctionsContainNulls,\n        pgSimpleCollections: simpleCollections,\n        pgIncludeExtensionResources: includeExtensionResources,\n        pgIgnoreRBAC: ignoreRBAC,\n      },\n      graphileBuildOptions,\n      graphqlBuildOptions // DEPRECATED!\n    )\n  );\n};\n\nfunction abort(e) {\n  /* eslint-disable no-console */\n  console.error(\"Error occured whilst writing cache\");\n  console.error(e);\n  process.exit(1);\n  /* eslint-enable */\n}\n\nexport const createPostGraphileSchema = async (\n  pgConfig: PgConfig,\n  schemas: Array<string> | string,\n  options: PostGraphileOptions = {}\n) => {\n  let writeCache;\n  const builder = await getPostGraphileBuilder(\n    pgConfig,\n    schemas,\n    Object.assign({}, options, {\n      setWriteCacheCallback(fn) {\n        writeCache = fn;\n      },\n    })\n  );\n  const schema = builder.buildSchema();\n  if (writeCache) writeCache().catch(abort);\n  return schema;\n};\n\n/*\n * Unless an error occurs, `onNewSchema` is guaranteed to be called before this promise resolves\n */\nexport const watchPostGraphileSchema = async (\n  pgConfig: PgConfig,\n  schemas: Array<string> | string,\n  options: PostGraphileOptions = {},\n  onNewSchema: SchemaListener\n) => {\n  if (typeof onNewSchema !== \"function\") {\n    throw new Error(\n      \"You cannot call watchPostGraphileSchema without a function to pass new schemas to\"\n    );\n  }\n  if (options.readCache) {\n    throw new Error(\"Using readCache in watch mode does not make sense.\");\n  }\n  let writeCache;\n  const builder = await getPostGraphileBuilder(\n    pgConfig,\n    schemas,\n    Object.assign({}, options, {\n      setWriteCacheCallback(fn) {\n        writeCache = fn;\n      },\n    })\n  );\n  let released = false;\n  function handleNewSchema(...args) {\n    if (writeCache) writeCache().catch(abort);\n    onNewSchema(...args);\n  }\n  await builder.watchSchema(handleNewSchema);\n\n  return async function release() {\n    if (released) return;\n    released = true;\n    await builder.unwatchSchema();\n  };\n};\n\n// Backwards compat\nexport const postGraphQLBaseOverrides = postGraphileBaseOverrides;\nexport const postGraphQLClassicIdsOverrides = postGraphileClassicIdsOverrides;\nexport const postGraphQLInflection = postGraphileInflection;\nexport const postGraphQLClassicIdsInflection = postGraphileClassicIdsInflection;\nexport const createPostGraphQLSchema = createPostGraphileSchema;\nexport const watchPostGraphQLSchema = watchPostGraphileSchema;\n"]}