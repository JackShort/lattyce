{"version":3,"sources":["../../src/plugins/PgIntrospectionPlugin.js"],"names":["debug","INTROSPECTION_PATH","__dirname","WATCH_FIXTURES_PATH","readFile","filename","encoding","Promise","resolve","reject","err","res","PgIntrospectionPlugin","builder","pgConfig","pgSchemas","schemas","pgEnableTags","persistentMemoizeWithKey","key","fn","pgThrowOnMissingSchema","pgIncludeExtensionResources","introspect","Array","isArray","Error","cacheKey","version","cloneResults","obj","result","Object","keys","reduce","memo","k","map","v","assign","introspectionResultsByKind","pgClient","introspectionQuery","rows","query","object","kind","push","namespace","class","attribute","type","constraint","procedure","extension","forEach","description","parsed","tags","text","extensionConfigurationClassIds","e","configurationClassIds","klass","isExtensionConfigurationTable","indexOf","id","freeze","knownSchemas","n","name","missingSchemas","filter","s","length","errorMessage","join","console","warn","xByY","arrayOfX","attrKey","x","xByYAndZ","attrKey2","namespaceById","classById","typeById","attributeByClassIdAndNum","extensionById","relate","array","newAttr","lookupAttr","lookup","missingOk","entry","innerKey","JSON","stringify","_","attributes","attr","classId","releasePgClient","listener","stopListening","catch","removeListener","registerWatcher","triggerRebuild","pg","Pool","connect","release","Client","on","end","watchSqlInner","sql","error","chalk","bold","yellow","handleChange","leading","trailing","notification","channel","payload","parse","commands","schema","command","affectsOurSchemas","some","schemaName","hook","build","extend","pgIntrospectionResultsByKind"],"mappings":"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","file":"PgIntrospectionPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport withPgClient from \"../withPgClient\";\nimport { parseTags } from \"../utils\";\nimport { readFile as rawReadFile } from \"fs\";\nimport pg from \"pg\";\nimport debugFactory from \"debug\";\nimport chalk from \"chalk\";\nimport throttle from \"lodash/throttle\";\nimport flatMap from \"lodash/flatMap\";\nimport { quacksLikePgPool } from \"../withPgClient\";\n\nimport { version } from \"../../package.json\";\n\nconst debug = debugFactory(\"graphile-build-pg\");\nconst INTROSPECTION_PATH = `${__dirname}/../../res/introspection-query.sql`;\nconst WATCH_FIXTURES_PATH = `${__dirname}/../../res/watch-fixtures.sql`;\n\n// Ref: https://github.com/graphile/postgraphile/tree/master/src/postgres/introspection/object\n\nexport type PgNamespace = {\n  kind: \"namespace\",\n  id: string,\n  name: string,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nexport type PgProc = {\n  kind: \"procedure\",\n  name: string,\n  description: ?string,\n  namespaceId: string,\n  isStrict: boolean,\n  returnsSet: boolean,\n  isStable: boolean,\n  returnTypeId: string,\n  argTypeIds: Array<string>,\n  argNames: Array<string>,\n  argDefaultsNum: number,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n  aclExecutable: boolean,\n};\n\nexport type PgClass = {\n  kind: \"class\",\n  id: string,\n  name: string,\n  description: ?string,\n  classKind: string,\n  namespaceId: string,\n  namespaceName: string,\n  typeId: string,\n  isSelectable: boolean,\n  isInsertable: boolean,\n  isUpdatable: boolean,\n  isDeletable: boolean,\n  isExtensionConfigurationTable: boolean,\n  namespace: PgNamespace,\n  type: PgType,\n  tags: { [string]: string },\n  attributes: [PgAttribute],\n  aclSelectable: boolean,\n  aclInsertable: boolean,\n  aclUpdatable: boolean,\n  aclDeletable: boolean,\n};\n\nexport type PgType = {\n  kind: \"type\",\n  id: string,\n  name: string,\n  description: ?string,\n  namespaceId: string,\n  namespaceName: string,\n  type: string,\n  category: string,\n  domainIsNotNull: boolean,\n  arrayItemTypeId: ?string,\n  typeLength: ?number,\n  isPgArray: boolean,\n  classId: ?string,\n  domainBaseTypeId: ?string,\n  domainTypeModifier: ?number,\n  tags: { [string]: string },\n};\n\nexport type PgAttribute = {\n  kind: \"attribute\",\n  classId: string,\n  num: number,\n  name: string,\n  description: ?string,\n  typeId: string,\n  typeModifier: number,\n  isNotNull: boolean,\n  hasDefault: boolean,\n  class: PgClass,\n  type: PgType,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n  aclSelectable: boolean,\n  aclInsertable: boolean,\n  aclUpdatable: boolean,\n};\n\nexport type PgConstraint = {\n  kind: \"constraint\",\n  name: string,\n  type: string,\n  classId: string,\n  foreignClassId: ?string,\n  description: ?string,\n  keyAttributeNums: Array<number>,\n  foreignKeyAttributeNums: Array<number>,\n  namespace: PgNamespace,\n  tags: { [string]: string },\n};\n\nexport type PgExtension = {\n  kind: \"extension\",\n  id: string,\n  name: string,\n  namespaceId: string,\n  relocatable: boolean,\n  version: string,\n  configurationClassIds?: Array<string>,\n  description: ?string,\n  tags: { [string]: string },\n};\n\nfunction readFile(filename, encoding) {\n  return new Promise((resolve, reject) => {\n    rawReadFile(filename, encoding, (err, res) => {\n      if (err) reject(err);\n      else resolve(res);\n    });\n  });\n}\n\nexport default (async function PgIntrospectionPlugin(\n  builder,\n  {\n    pgConfig,\n    pgSchemas: schemas,\n    pgEnableTags,\n    persistentMemoizeWithKey = (key, fn) => fn(),\n    pgThrowOnMissingSchema = false,\n    pgIncludeExtensionResources = false,\n  }\n) {\n  async function introspect() {\n    // Perform introspection\n    if (!Array.isArray(schemas)) {\n      throw new Error(\"Argument 'schemas' (array) is required\");\n    }\n    const cacheKey = `PgIntrospectionPlugin-introspectionResultsByKind-v${version}`;\n    const cloneResults = obj => {\n      const result = Object.keys(obj).reduce((memo, k) => {\n        memo[k] = obj[k].map(v => Object.assign({}, v));\n        return memo;\n      }, {});\n      return result;\n    };\n    const introspectionResultsByKind = cloneResults(\n      await persistentMemoizeWithKey(cacheKey, () =>\n        withPgClient(pgConfig, async pgClient => {\n          const introspectionQuery = await readFile(INTROSPECTION_PATH, \"utf8\");\n          const { rows } = await pgClient.query(introspectionQuery, [\n            schemas,\n            pgIncludeExtensionResources,\n          ]);\n\n          const result = rows.reduce(\n            (memo, { object }) => {\n              memo[object.kind].push(object);\n              return memo;\n            },\n            {\n              namespace: [],\n              class: [],\n              attribute: [],\n              type: [],\n              constraint: [],\n              procedure: [],\n              extension: [],\n            }\n          );\n\n          // Parse tags from comments\n          [\n            \"namespace\",\n            \"class\",\n            \"attribute\",\n            \"type\",\n            \"constraint\",\n            \"procedure\",\n            \"extension\",\n          ].forEach(kind => {\n            result[kind].forEach(object => {\n              if (pgEnableTags && object.description) {\n                const parsed = parseTags(object.description);\n                object.tags = parsed.tags;\n                object.description = parsed.text;\n              } else {\n                object.tags = {};\n              }\n            });\n          });\n\n          const extensionConfigurationClassIds = flatMap(\n            result.extension,\n            e => e.configurationClassIds\n          );\n          result.class.forEach(klass => {\n            klass.isExtensionConfigurationTable =\n              extensionConfigurationClassIds.indexOf(klass.id) >= 0;\n          });\n\n          for (const k in result) {\n            result[k].map(Object.freeze);\n          }\n          return Object.freeze(result);\n        })\n      )\n    );\n\n    const knownSchemas = introspectionResultsByKind.namespace.map(n => n.name);\n    const missingSchemas = schemas.filter(s => knownSchemas.indexOf(s) < 0);\n    if (missingSchemas.length) {\n      const errorMessage = `You requested to use schema '${schemas.join(\n        \"', '\"\n      )}'; however we couldn't find some of those! Missing schemas are: '${missingSchemas.join(\n        \"', '\"\n      )}'`;\n      if (pgThrowOnMissingSchema) {\n        throw new Error(errorMessage);\n      } else {\n        console.warn(\"⚠️ WARNING⚠️  \" + errorMessage); // eslint-disable-line no-console\n      }\n    }\n\n    const xByY = (arrayOfX, attrKey) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = x;\n        return memo;\n      }, {});\n    const xByYAndZ = (arrayOfX, attrKey, attrKey2) =>\n      arrayOfX.reduce((memo, x) => {\n        memo[x[attrKey]] = memo[x[attrKey]] || {};\n        memo[x[attrKey]][x[attrKey2]] = x;\n        return memo;\n      }, {});\n    introspectionResultsByKind.namespaceById = xByY(\n      introspectionResultsByKind.namespace,\n      \"id\"\n    );\n    introspectionResultsByKind.classById = xByY(\n      introspectionResultsByKind.class,\n      \"id\"\n    );\n    introspectionResultsByKind.typeById = xByY(\n      introspectionResultsByKind.type,\n      \"id\"\n    );\n    introspectionResultsByKind.attributeByClassIdAndNum = xByYAndZ(\n      introspectionResultsByKind.attribute,\n      \"classId\",\n      \"num\"\n    );\n    introspectionResultsByKind.extensionById = xByY(\n      introspectionResultsByKind.extension,\n      \"id\"\n    );\n\n    const relate = (array, newAttr, lookupAttr, lookup, missingOk = false) => {\n      array.forEach(entry => {\n        const key = entry[lookupAttr];\n        if (Array.isArray(key)) {\n          entry[newAttr] = key\n            .map(innerKey => {\n              const result = lookup[innerKey];\n              if (innerKey && !result) {\n                if (missingOk) {\n                  return;\n                }\n                throw new Error(\n                  `Could not look up '${newAttr}' by '${lookupAttr}' ('${innerKey}') on '${JSON.stringify(\n                    entry\n                  )}'`\n                );\n              }\n              return result;\n            })\n            .filter(_ => _);\n        } else {\n          const result = lookup[key];\n          if (key && !result) {\n            if (missingOk) {\n              return;\n            }\n            throw new Error(\n              `Could not look up '${newAttr}' by '${lookupAttr}' on '${JSON.stringify(\n                entry\n              )}'`\n            );\n          }\n          entry[newAttr] = result;\n        }\n      });\n    };\n\n    relate(\n      introspectionResultsByKind.class,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because it could be a type defined in a different namespace - which is fine so long as we don't allow querying it directly\n    );\n\n    relate(\n      introspectionResultsByKind.class,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById\n    );\n\n    relate(\n      introspectionResultsByKind.attribute,\n      \"type\",\n      \"typeId\",\n      introspectionResultsByKind.typeById\n    );\n\n    relate(\n      introspectionResultsByKind.procedure,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"class\",\n      \"classId\",\n      introspectionResultsByKind.classById,\n      true\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"domainBaseType\",\n      \"domainBaseTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are domains\n    );\n\n    relate(\n      introspectionResultsByKind.type,\n      \"arrayItemType\",\n      \"arrayItemTypeId\",\n      introspectionResultsByKind.typeById,\n      true // Because not all types are arrays\n    );\n\n    relate(\n      introspectionResultsByKind.extension,\n      \"namespace\",\n      \"namespaceId\",\n      introspectionResultsByKind.namespaceById,\n      true // Because the extension could be a defined in a different namespace\n    );\n\n    relate(\n      introspectionResultsByKind.extension,\n      \"configurationClasses\",\n      \"configurationClassIds\",\n      introspectionResultsByKind.classById,\n      true // Because the configuration table could be a defined in a different namespace\n    );\n\n    introspectionResultsByKind.class.forEach(klass => {\n      klass.attributes = introspectionResultsByKind.attribute.filter(\n        attr => attr.classId === klass.id\n      );\n    });\n\n    return introspectionResultsByKind;\n  }\n\n  let introspectionResultsByKind = await introspect();\n\n  let pgClient, releasePgClient, listener;\n\n  function stopListening() {\n    if (pgClient) {\n      pgClient.query(\"unlisten postgraphile_watch\").catch(e => {\n        debug(`Error occurred trying to unlisten watch: ${e}`);\n      });\n      pgClient.removeListener(\"notification\", listener);\n    }\n    if (releasePgClient) {\n      releasePgClient();\n      pgClient = null;\n    }\n  }\n\n  builder.registerWatcher(async triggerRebuild => {\n    // In case we started listening before, clean up\n    await stopListening();\n\n    // Check we can get a pgClient\n    if (pgConfig instanceof pg.Pool || quacksLikePgPool(pgConfig)) {\n      pgClient = await pgConfig.connect();\n      releasePgClient = () => pgClient && pgClient.release();\n    } else if (typeof pgConfig === \"string\") {\n      pgClient = new pg.Client(pgConfig);\n      pgClient.on(\"error\", e => {\n        debug(\"pgClient error occurred: %s\", e);\n      });\n      releasePgClient = () =>\n        new Promise((resolve, reject) => {\n          if (pgClient) pgClient.end(err => (err ? reject(err) : resolve()));\n          else resolve();\n        });\n      await new Promise((resolve, reject) => {\n        if (pgClient) {\n          pgClient.connect(err => (err ? reject(err) : resolve()));\n        } else {\n          resolve();\n        }\n      });\n    } else {\n      throw new Error(\n        \"Cannot watch schema with this configuration - need a string or pg.Pool\"\n      );\n    }\n    // Install the watch fixtures.\n    const watchSqlInner = await readFile(WATCH_FIXTURES_PATH, \"utf8\");\n    const sql = `begin; ${watchSqlInner}; commit;`;\n    try {\n      await pgClient.query(sql);\n    } catch (error) {\n      /* eslint-disable no-console */\n      console.warn(\n        `${chalk.bold.yellow(\n          \"Failed to setup watch fixtures in Postgres database\"\n        )} ️️⚠️`\n      );\n      console.warn(\n        chalk.yellow(\n          \"This is likely because your Postgres user is not a superuser. If the\"\n        )\n      );\n      console.warn(\n        chalk.yellow(\n          \"fixtures already exist, the watch functionality may still work.\"\n        )\n      );\n      console.warn(\n        chalk.yellow(\"Enable DEBUG='graphile-build-pg' to see the error\")\n      );\n      debug(error);\n      /* eslint-enable no-console */\n      await pgClient.query(\"rollback\");\n    }\n\n    await pgClient.query(\"listen postgraphile_watch\");\n\n    const handleChange = throttle(\n      async () => {\n        debug(`Schema change detected: re-inspecting schema...`);\n        introspectionResultsByKind = await introspect();\n        debug(`Schema change detected: re-inspecting schema complete`);\n        triggerRebuild();\n      },\n      750,\n      {\n        leading: true,\n        trailing: true,\n      }\n    );\n\n    listener = async notification => {\n      if (notification.channel !== \"postgraphile_watch\") {\n        return;\n      }\n      try {\n        const payload = JSON.parse(notification.payload);\n        payload.payload = payload.payload || [];\n        if (payload.type === \"ddl\") {\n          const commands = payload.payload\n            .filter(\n              ({ schema }) => schema == null || schemas.indexOf(schema) >= 0\n            )\n            .map(({ command }) => command);\n          if (commands.length) {\n            handleChange();\n          }\n        } else if (payload.type === \"drop\") {\n          const affectsOurSchemas = payload.payload.some(\n            schemaName => schemas.indexOf(schemaName) >= 0\n          );\n          if (affectsOurSchemas) {\n            handleChange();\n          }\n        } else {\n          throw new Error(`Payload type '${payload.type}' not recognised`);\n        }\n      } catch (e) {\n        debug(`Error occurred parsing notification payload: ${e}`);\n      }\n    };\n    pgClient.on(\"notification\", listener);\n    introspectionResultsByKind = await introspect();\n  }, stopListening);\n\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n    });\n  });\n}: Plugin);\n"]}