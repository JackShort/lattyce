{"version":3,"sources":["../../src/plugins/PgOrderAllColumnsPlugin.js"],"names":["PgOrderAllColumnsPlugin","builder","hook","values","build","context","extend","pgIntrospectionResultsByKind","introspectionResultsByKind","pgColumnFilter","inflection","pgOmit","omit","scope","isPgRowSortEnum","pgIntrospection","table","kind","attribute","filter","attr","classId","id","reduce","memo","ascFieldName","orderByColumnEnum","descFieldName","value","alias","toLowerCase","specs","name"],"mappings":";;;;;;kBAGgB,SAASA,uBAAT,CAAiCC,OAAjC,EAA0C;AACxDA,UAAQC,IAAR,CAAa,wBAAb,EAAuC,CAACC,MAAD,EAASC,KAAT,EAAgBC,OAAhB,KAA4B;AACjE,UAAM;AACJC,YADI;AAEJC,oCAA8BC,0BAF1B;AAGJC,oBAHI;AAIJC,gBAJI;AAKJC,cAAQC;AALJ,QAMFR,KANJ;AAOA,UAAM;AACJS,aAAO,EAAEC,eAAF,EAAmBC,iBAAiBC,KAApC;AADH,QAEFX,OAFJ;AAGA,QAAI,CAACS,eAAD,IAAoB,CAACE,KAArB,IAA8BA,MAAMC,IAAN,KAAe,OAAjD,EAA0D;AACxD,aAAOd,MAAP;AACD;AACD,WAAOG,OACLH,MADK,EAELK,2BAA2BU,SAA3B,CACGC,MADH,CACUC,QAAQA,KAAKC,OAAL,KAAiBL,MAAMM,EADzC,EAEGH,MAFH,CAEUC,QAAQX,eAAeW,IAAf,EAAqBhB,KAArB,EAA4BC,OAA5B,CAFlB,EAGGkB,MAHH,CAGU,CAACC,IAAD,EAAOJ,IAAP,KAAgB;AACtB,UAAIR,KAAKQ,IAAL,EAAW,OAAX,CAAJ,EAAyB;AACvB,eAAOI,IAAP;AACD;AACD,YAAMC,eAAef,WAAWgB,iBAAX,CAA6BN,IAA7B,EAAmC,IAAnC,CAArB;AACA,YAAMO,gBAAgBjB,WAAWgB,iBAAX,CAA6BN,IAA7B,EAAmC,KAAnC,CAAtB;AACAI,WAAKC,YAAL,IAAqB;AACnBG,eAAO;AACLC,iBAAOJ,aAAaK,WAAb,EADF;AAELC,iBAAO,CAAC,CAACX,KAAKY,IAAN,EAAY,IAAZ,CAAD;AAFF;AADY,OAArB;AAMAR,WAAKG,aAAL,IAAsB;AACpBC,eAAO;AACLC,iBAAOF,cAAcG,WAAd,EADF;AAELC,iBAAO,CAAC,CAACX,KAAKY,IAAN,EAAY,KAAZ,CAAD;AAFF;AADa,OAAtB;AAMA,aAAOR,IAAP;AACD,KAtBH,EAsBK,EAtBL,CAFK,EAyBJ,mCAAkCR,MAAMgB,IAAK,GAzBzC,CAAP;AA2BD,GAzCD;AA0CD,C","file":"PgOrderAllColumnsPlugin.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgOrderAllColumnsPlugin(builder) {\n  builder.hook(\"GraphQLEnumType:values\", (values, build, context) => {\n    const {\n      extend,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgColumnFilter,\n      inflection,\n      pgOmit: omit,\n    } = build;\n    const {\n      scope: { isPgRowSortEnum, pgIntrospection: table },\n    } = context;\n    if (!isPgRowSortEnum || !table || table.kind !== \"class\") {\n      return values;\n    }\n    return extend(\n      values,\n      introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === table.id)\n        .filter(attr => pgColumnFilter(attr, build, context))\n        .reduce((memo, attr) => {\n          if (omit(attr, \"order\")) {\n            return memo;\n          }\n          const ascFieldName = inflection.orderByColumnEnum(attr, true);\n          const descFieldName = inflection.orderByColumnEnum(attr, false);\n          memo[ascFieldName] = {\n            value: {\n              alias: ascFieldName.toLowerCase(),\n              specs: [[attr.name, true]],\n            },\n          };\n          memo[descFieldName] = {\n            value: {\n              alias: descFieldName.toLowerCase(),\n              specs: [[attr.name, false]],\n            },\n          };\n          return memo;\n        }, {}),\n      `Adding order values from table '${table.name}'`\n    );\n  });\n}: Plugin);\n"]}