{"version":3,"sources":["../../src/plugins/PgBasicsPlugin.js"],"names":["preventEmptyResult","defaultPgColumnFilter","_attr","_build","_context","obj","Object","keys","reduce","memo","key","fn","args","result","apply","length","stringifiedArgs","require","inspect","Error","String","omitWithRBACChecks","entity","permission","ORDINARY_TABLE","VIEW","MATERIALIZED_VIEW","isTableLike","kind","classKind","EXECUTE","aclExecutable","tableEntity","READ","ALL","MANY","aclSelectable","attributes","some","attr","CREATE","aclInsertable","UPDATE","aclUpdatable","DELETE","aclDeletable","class","attributeEntity","klass","FILTER","ORDER","PgBasicsPlugin","builder","pgStrictFunctions","pgColumnFilter","pgIgnoreRBAC","pgOmit","omit","hook","build","extend","graphileBuildPgVersion","version","pgSql","sql","pgQueryFromResolveData","queryFromResolveData","pgAddStartEndCursor","addStartEndCursor","pgMakeProcField","makeProcField","pgParseIdentifier","parseIdentifier","pgViaTemporaryTable","viaTemporaryTable","inflection","conditionType","typeName","upperCamelCase","inputType","rangeBoundType","rangeType","patchType","baseInputType","patchField","itemName","camelCase","orderByType","pluralize","edge","connection","_functionName","proc","tags","name","_typeName","type","_tableName","table","_singularizedTableName","singularize","replace","_columnName","_options","enumType","argument","index","orderByColumnEnum","ascending","columnName","skipRowId","constantCase","domainType","enumName","inValue","value","_","$","tableNode","tableFieldName","allRows","allRowsSimple","functionMutationName","functionQueryName","functionQueryNameList","functionPayloadType","functionInputType","tableType","column","computedColumn","pseudoColumnName","_table","fieldName","computedColumnList","singleRelationByKeys","detailedKeys","_foreignTable","constraint","map","join","manyRelationByKeys","foreignFieldName","manyRelationByKeysSimple","rowByUniqueKeys","updateByKeys","updateFieldName","deleteByKeys","deleteFieldName","updateByKeysInputType","deleteByKeysInputType","updateNode","deleteNode","updateNodeInputType","deleteNodeInputType","edgeField","scalarFunctionConnection","scalarFunctionEdge","createField","createInputType","createPayloadType","updatePayloadType","deletePayloadType"],"mappings":"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","file":"PgBasicsPlugin.js","sourcesContent":["// @flow\nimport sql from \"pg-sql2\";\nimport type { Plugin } from \"graphile-build\";\nimport { version } from \"../../package.json\";\nimport type {\n  PgProc,\n  PgType,\n  PgClass,\n  PgAttribute,\n  PgConstraint,\n} from \"./PgIntrospectionPlugin\";\n\nimport queryFromResolveData from \"../queryFromResolveData\";\nimport addStartEndCursor from \"./addStartEndCursor\";\nimport omit, {\n  CREATE,\n  READ,\n  UPDATE,\n  DELETE,\n  ALL,\n  MANY,\n  ORDER,\n  FILTER,\n  EXECUTE,\n} from \"../omit\";\nimport makeProcField from \"./makeProcField\";\nimport parseIdentifier from \"../parseIdentifier\";\nimport viaTemporaryTable from \"./viaTemporaryTable\";\n\nconst defaultPgColumnFilter = (_attr, _build, _context) => true;\ntype Keys = Array<{\n  column: string,\n  table: string,\n  schema: ?string,\n}>;\n\nexport function preventEmptyResult<\n  // eslint-disable-next-line flowtype/no-weak-types\n  O: { [key: string]: (...args: Array<any>) => string }\n>(obj: O): $ObjMap<O, <V>(V) => V> {\n  return Object.keys(obj).reduce((memo, key) => {\n    const fn = obj[key];\n    memo[key] = function(...args) {\n      const result = fn.apply(this, args);\n      if (typeof result !== \"string\" || result.length === 0) {\n        const stringifiedArgs = require(\"util\").inspect(args);\n        throw new Error(\n          `Inflector for '${key}' returned '${String(\n            result\n          )}'; expected non-empty string\\n` +\n            `See: https://github.com/graphile/graphile-build/blob/master/packages/graphile-build-pg/src/plugins/PgBasicsPlugin.js\\n` +\n            `Arguments passed to ${key}:\\n${stringifiedArgs}`\n        );\n      }\n      return result;\n    };\n    return memo;\n  }, {});\n}\n\nfunction omitWithRBACChecks(\n  entity: PgProc | PgClass | PgAttribute | PgConstraint,\n  permission: string\n) {\n  const ORDINARY_TABLE = \"r\";\n  const VIEW = \"v\";\n  const MATERIALIZED_VIEW = \"m\";\n  const isTableLike = entity =>\n    entity &&\n    entity.kind === \"class\" &&\n    (entity.classKind === ORDINARY_TABLE ||\n      entity.classKind === VIEW ||\n      entity.classKind === MATERIALIZED_VIEW);\n  if (entity.kind === \"procedure\") {\n    if (permission === EXECUTE && !entity.aclExecutable) {\n      return true;\n    }\n  } else if (entity.kind === \"class\" && isTableLike(entity)) {\n    const tableEntity: PgClass = entity;\n    if (\n      (permission === READ || permission === ALL || permission === MANY) &&\n      (!tableEntity.aclSelectable &&\n        !tableEntity.attributes.some(attr => attr.aclSelectable))\n    ) {\n      return true;\n    } else if (\n      permission === CREATE &&\n      (!tableEntity.aclInsertable &&\n        !tableEntity.attributes.some(attr => attr.aclInsertable))\n    ) {\n      return true;\n    } else if (\n      permission === UPDATE &&\n      (!tableEntity.aclUpdatable &&\n        !tableEntity.attributes.some(attr => attr.aclUpdatable))\n    ) {\n      return true;\n    } else if (permission === DELETE && !tableEntity.aclDeletable) {\n      return true;\n    }\n  } else if (entity.kind === \"attribute\" && isTableLike(entity.class)) {\n    const attributeEntity: PgAttribute = entity;\n\n    const klass = attributeEntity.class;\n    // Have we got *any* permissions on the table?\n    if (\n      klass.aclSelectable ||\n      klass.attributes.some(attr => attr.aclSelectable)\n    ) {\n      // Yes; this is a regular table; omit if RBAC permissions tell us to.\n      if (\n        (permission === READ ||\n          permission === FILTER ||\n          permission === ORDER) &&\n        !attributeEntity.aclSelectable\n      ) {\n        return true;\n      } else if (permission === CREATE && !attributeEntity.aclInsertable) {\n        return true;\n      } else if (permission === UPDATE && !attributeEntity.aclUpdatable) {\n        return true;\n      }\n    } else {\n      // No permissions on the table at all, so normal connections will skip\n      // over it. Thus we must be being exposed via a security definer function\n      // or similar, so we should expose all fields except those that are\n      // explicitly @omit-ed.\n    }\n  }\n  return omit(entity, permission);\n}\n\nexport default (function PgBasicsPlugin(\n  builder,\n  {\n    pgStrictFunctions = false,\n    pgColumnFilter = defaultPgColumnFilter,\n    pgIgnoreRBAC = false,\n  }\n) {\n  const pgOmit = pgIgnoreRBAC ? omit : omitWithRBACChecks;\n  builder.hook(\"build\", build => {\n    return build.extend(build, {\n      graphileBuildPgVersion: version,\n      pgSql: sql,\n      pgStrictFunctions,\n      pgColumnFilter,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgAddStartEndCursor: addStartEndCursor,\n      pgOmit,\n      pgMakeProcField: makeProcField,\n      pgParseIdentifier: parseIdentifier,\n      pgViaTemporaryTable: viaTemporaryTable,\n    });\n  });\n\n  builder.hook(\"inflection\", (inflection, build) => {\n    return build.extend(\n      inflection,\n      preventEmptyResult({\n        // These helpers are passed GraphQL type names as strings\n        conditionType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-condition`);\n        },\n        inputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-input`);\n        },\n        rangeBoundType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range-bound`);\n        },\n        rangeType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-range`);\n        },\n        patchType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-patch`);\n        },\n        baseInputType(typeName: string) {\n          return this.upperCamelCase(`${typeName}-base-input`);\n        },\n        patchField(itemName: string) {\n          return this.camelCase(`${itemName}-patch`);\n        },\n        orderByType(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-order-by`);\n        },\n        edge(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-edge`);\n        },\n        connection(typeName: string) {\n          return this.upperCamelCase(`${this.pluralize(typeName)}-connection`);\n        },\n\n        // These helpers handle overrides via smart comments. They should only\n        // be used in other inflectors, hence the underscore prefix.\n        //\n        // IMPORTANT: do NOT do case transforms here, because detail can be\n        // lost, e.g.\n        // `constantCase(camelCase('foo_1')) !== constantCase('foo_1')`\n        _functionName(proc: PgProc) {\n          return proc.tags.name || proc.name;\n        },\n        _typeName(type: PgType) {\n          // 'type' introspection result\n          return type.tags.name || type.name;\n        },\n        _tableName(table: PgClass) {\n          return table.tags.name || table.type.tags.name || table.name;\n        },\n        _singularizedTableName(table: PgClass): string {\n          return this.singularize(this._tableName(table)).replace(\n            /.(?:(?:[_-]i|I)nput|(?:[_-]p|P)atch)$/,\n            \"$&_record\"\n          );\n        },\n        _columnName(attr: PgAttribute, _options?: { skipRowId?: boolean }) {\n          return attr.tags.name || attr.name;\n        },\n\n        // From here down, functions are passed database introspection results\n        enumType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        argument(name: ?string, index: number) {\n          return this.camelCase(name || `arg${index}`);\n        },\n        orderByColumnEnum(attr: PgAttribute, ascending: boolean) {\n          const columnName = this._columnName(attr, {\n            skipRowId: true, // Because we messed up 😔\n          });\n          return this.constantCase(\n            `${columnName}_${ascending ? \"asc\" : \"desc\"}`\n          );\n        },\n        domainType(type: PgType) {\n          return this.upperCamelCase(this._typeName(type));\n        },\n        enumName(inValue: string) {\n          let value = inValue;\n\n          if (value === \"\") {\n            return \"_EMPTY_\";\n          }\n\n          // Some enums use asterisks to signify wildcards - this might be for\n          // the whole item, or prefixes/suffixes, or even in the middle.  This\n          // is provided on a best efforts basis, if it doesn't suit your\n          // purposes then please pass a custom inflector as mentioned below.\n          value = value\n            .replace(/\\*/g, \"_ASTERISK_\")\n            .replace(/^(_?)_+ASTERISK/, \"$1ASTERISK\")\n            .replace(/ASTERISK_(_?)_*$/, \"ASTERISK$1\");\n\n          // This is a best efforts replacement for common symbols that you\n          // might find in enums. Generally we only support enums that are\n          // alphanumeric, if these replacements don't work for you, you should\n          // pass a custom inflector that replaces this `enumName` method\n          // with one of your own chosing.\n          value =\n            {\n              // SQL comparison operators\n              \">\": \"GREATER_THAN\",\n              \">=\": \"GREATER_THAN_OR_EQUAL\",\n              \"=\": \"EQUAL\",\n              \"!=\": \"NOT_EQUAL\",\n              \"<>\": \"DIFFERENT\",\n              \"<=\": \"LESS_THAN_OR_EQUAL\",\n              \"<\": \"LESS_THAN\",\n\n              // PostgreSQL LIKE shortcuts\n              \"~~\": \"LIKE\",\n              \"~~*\": \"ILIKE\",\n              \"!~~\": \"NOT_LIKE\",\n              \"!~~*\": \"NOT_ILIKE\",\n\n              // '~' doesn't necessarily represent regexps, but the three\n              // operators following it likely do, so we'll use the word TILDE\n              // in all for consistency.\n              \"~\": \"TILDE\",\n              \"~*\": \"TILDE_ASTERISK\",\n              \"!~\": \"NOT_TILDE\",\n              \"!~*\": \"NOT_TILDE_ASTERISK\",\n\n              // A number of other symbols where we're not sure of their\n              // meaning.  We give them common generic names so that they're\n              // suitable for multiple purposes, e.g. favouring 'PLUS' over\n              // 'ADDITION' and 'DOT' over 'FULL_STOP'\n              \"%\": \"PERCENT\",\n              \"+\": \"PLUS\",\n              \"-\": \"MINUS\",\n              \"/\": \"SLASH\",\n              \"\\\\\": \"BACKSLASH\",\n              _: \"UNDERSCORE\",\n              \"#\": \"POUND\",\n              \"£\": \"STERLING\",\n              $: \"DOLLAR\",\n              \"&\": \"AMPERSAND\",\n              \"@\": \"AT\",\n              \"'\": \"APOSTROPHE\",\n              '\"': \"QUOTE\",\n              \"`\": \"BACKTICK\",\n              \":\": \"COLON\",\n              \";\": \"SEMICOLON\",\n              \"!\": \"EXCLAMATION_POINT\",\n              \"?\": \"QUESTION_MARK\",\n              \",\": \"COMMA\",\n              \".\": \"DOT\",\n              \"^\": \"CARET\",\n              \"|\": \"BAR\",\n              \"[\": \"OPEN_BRACKET\",\n              \"]\": \"CLOSE_BRACKET\",\n              \"(\": \"OPEN_PARENTHESIS\",\n              \")\": \"CLOSE_PARENTHESIS\",\n              \"{\": \"OPEN_BRACE\",\n              \"}\": \"CLOSE_BRACE\",\n            }[value] || value;\n          return value;\n        },\n\n        tableNode(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        tableFieldName(table: PgClass) {\n          return this.camelCase(this._singularizedTableName(table));\n        },\n        allRows(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}`\n          );\n        },\n        allRowsSimple(table: PgClass) {\n          return this.camelCase(\n            `all-${this.pluralize(this._singularizedTableName(table))}-list`\n          );\n        },\n        functionMutationName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryName(proc: PgProc) {\n          return this.camelCase(this._functionName(proc));\n        },\n        functionQueryNameList(proc: PgProc) {\n          return this.camelCase(`${this._functionName(proc)}-list`);\n        },\n        functionPayloadType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-payload`);\n        },\n        functionInputType(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-input`);\n        },\n        tableType(table: PgClass) {\n          return this.upperCamelCase(this._singularizedTableName(table));\n        },\n        column(attr: PgAttribute) {\n          return this.camelCase(this._columnName(attr));\n        },\n        computedColumn(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName || this.camelCase(pseudoColumnName);\n        },\n        computedColumnList(\n          pseudoColumnName: string,\n          proc: PgProc,\n          _table: PgClass\n        ) {\n          return proc.tags.fieldName\n            ? proc.tags.fieldName + \"List\"\n            : this.camelCase(`${pseudoColumnName}-list`);\n        },\n        singleRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        manyRelationByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys.map(key => this.column(key)).join(\"-and-\")}`\n          );\n        },\n        manyRelationByKeysSimple(\n          detailedKeys: Keys,\n          table: PgClass,\n          _foreignTable: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.foreignFieldName) {\n            return constraint.tags.foreignFieldName;\n          }\n          return this.camelCase(\n            `${this.pluralize(\n              this._singularizedTableName(table)\n            )}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-list`\n          );\n        },\n        rowByUniqueKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.fieldName) {\n            return constraint.tags.fieldName;\n          }\n          return this.camelCase(\n            `${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return constraint.tags.updateFieldName;\n          }\n          return this.camelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        deleteByKeys(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return constraint.tags.deleteFieldName;\n          }\n          return this.camelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}`\n          );\n        },\n        updateByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.updateFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.updateFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        deleteByKeysInputType(\n          detailedKeys: Keys,\n          table: PgClass,\n          constraint: PgConstraint\n        ) {\n          if (constraint.tags.deleteFieldName) {\n            return this.upperCamelCase(\n              `${constraint.tags.deleteFieldName}-input`\n            );\n          }\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-by-${detailedKeys\n              .map(key => this.column(key))\n              .join(\"-and-\")}-input`\n          );\n        },\n        updateNode(table: PgClass) {\n          return this.camelCase(`update-${this._singularizedTableName(table)}`);\n        },\n        deleteNode(table: PgClass) {\n          return this.camelCase(`delete-${this._singularizedTableName(table)}`);\n        },\n        updateNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-input`\n          );\n        },\n        deleteNodeInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-input`\n          );\n        },\n        edgeField(table: PgClass) {\n          return this.camelCase(`${this._singularizedTableName(table)}-edge`);\n        },\n        scalarFunctionConnection(proc: PgProc) {\n          return this.upperCamelCase(`${this._functionName(proc)}-connection`);\n        },\n        scalarFunctionEdge(proc: PgProc) {\n          return this.upperCamelCase(\n            `${this.singularize(this._functionName(proc))}-edge`\n          );\n        },\n        createField(table: PgClass) {\n          return this.camelCase(`create-${this._singularizedTableName(table)}`);\n        },\n        createInputType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-input`\n          );\n        },\n        createPayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `create-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        updatePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `update-${this._singularizedTableName(table)}-payload`\n          );\n        },\n        deletePayloadType(table: PgClass) {\n          return this.upperCamelCase(\n            `delete-${this._singularizedTableName(table)}-payload`\n          );\n        },\n      })\n    );\n  });\n}: Plugin);\n"]}