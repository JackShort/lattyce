{"version":3,"sources":["../../src/plugins/PgConnectionArgCondition.js"],"names":["PgConnectionArgCondition","builder","hook","_","build","newWithHooks","pgIntrospectionResultsByKind","introspectionResultsByKind","pgGetGqlInputTypeByTypeIdAndModifier","graphql","GraphQLInputObjectType","GraphQLString","pgColumnFilter","inflection","pgOmit","omit","class","filter","table","isSelectable","namespace","forEach","tableTypeName","tableType","description","name","conditionType","fields","context","fieldWithHooks","attribute","attr","classId","id","reduce","memo","fieldName","column","type","typeId","typeModifier","isPgConnectionConditionInputField","pgIntrospection","isPgCondition","args","pgSql","sql","gql2pg","extend","getTypeByName","pgGetGqlTypeByTypeIdAndModifier","scope","isPgFieldConnection","isPgFieldSimpleCollection","pgFieldIntrospection","addArgDataGenerator","Self","field","shouldAddCondition","kind","TableType","TableConditionType","relevantAttributes","connectionCondition","condition","pgQuery","queryBuilder","val","where","fragment","getTableAlias","identifier"],"mappings":"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","file":"PgConnectionArgCondition.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\n\nexport default (function PgConnectionArgCondition(builder) {\n  builder.hook(\"init\", (_, build) => {\n    const {\n      newWithHooks,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgGetGqlInputTypeByTypeIdAndModifier,\n      graphql: { GraphQLInputObjectType, GraphQLString },\n      pgColumnFilter,\n      inflection,\n      pgOmit: omit,\n    } = build;\n    introspectionResultsByKind.class\n      .filter(table => table.isSelectable && !omit(table, \"filter\"))\n      .filter(table => !!table.namespace)\n      .forEach(table => {\n        const tableTypeName = inflection.tableType(table);\n        /* const TableConditionType = */\n        newWithHooks(\n          GraphQLInputObjectType,\n          {\n            description: `A condition to be used against \\`${tableTypeName}\\` object types. All fields are tested for equality and combined with a logical ‘and.’`,\n            name: inflection.conditionType(inflection.tableType(table)),\n            fields: context => {\n              const { fieldWithHooks } = context;\n              return introspectionResultsByKind.attribute\n                .filter(attr => attr.classId === table.id)\n                .filter(attr => pgColumnFilter(attr, build, context))\n                .filter(attr => !omit(attr, \"filter\"))\n                .reduce((memo, attr) => {\n                  const fieldName = inflection.column(attr);\n                  memo[fieldName] = fieldWithHooks(\n                    fieldName,\n                    {\n                      description: `Checks for equality with the object’s \\`${fieldName}\\` field.`,\n                      type:\n                        pgGetGqlInputTypeByTypeIdAndModifier(\n                          attr.typeId,\n                          attr.typeModifier\n                        ) || GraphQLString,\n                    },\n                    {\n                      isPgConnectionConditionInputField: true,\n                    }\n                  );\n                  return memo;\n                }, {});\n            },\n          },\n          {\n            pgIntrospection: table,\n            isPgCondition: true,\n          }\n        );\n      });\n    return _;\n  });\n  builder.hook(\n    \"GraphQLObjectType:fields:field:args\",\n    (args, build, context) => {\n      const {\n        pgSql: sql,\n        gql2pg,\n        extend,\n        getTypeByName,\n        pgGetGqlTypeByTypeIdAndModifier,\n        pgIntrospectionResultsByKind: introspectionResultsByKind,\n        pgColumnFilter,\n        inflection,\n        pgOmit: omit,\n      } = build;\n      const {\n        scope: {\n          isPgFieldConnection,\n          isPgFieldSimpleCollection,\n          pgFieldIntrospection: table,\n        },\n        addArgDataGenerator,\n        Self,\n        field,\n      } = context;\n      const shouldAddCondition =\n        isPgFieldConnection || isPgFieldSimpleCollection;\n      if (\n        !shouldAddCondition ||\n        !table ||\n        table.kind !== \"class\" ||\n        !table.namespace ||\n        omit(table, \"filter\")\n      ) {\n        return args;\n      }\n      const TableType = pgGetGqlTypeByTypeIdAndModifier(table.type.id, null);\n      const TableConditionType = getTypeByName(\n        inflection.conditionType(TableType.name)\n      );\n\n      const relevantAttributes = introspectionResultsByKind.attribute\n        .filter(attr => attr.classId === table.id)\n        .filter(attr => pgColumnFilter(attr, build, context))\n        .filter(attr => !omit(attr, \"filter\"));\n\n      addArgDataGenerator(function connectionCondition({ condition }) {\n        return {\n          pgQuery: queryBuilder => {\n            if (condition != null) {\n              relevantAttributes.forEach(attr => {\n                const fieldName = inflection.column(attr);\n                const val = condition[fieldName];\n                if (val != null) {\n                  queryBuilder.where(\n                    sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                      attr.name\n                    )} = ${gql2pg(val, attr.type, attr.typeModifier)}`\n                  );\n                } else if (val === null) {\n                  queryBuilder.where(\n                    sql.fragment`${queryBuilder.getTableAlias()}.${sql.identifier(\n                      attr.name\n                    )} IS NULL`\n                  );\n                }\n              });\n            }\n          },\n        };\n      });\n\n      return extend(\n        args,\n        {\n          condition: {\n            description:\n              \"A condition to be used in determining which values should be returned by the collection.\",\n            type: TableConditionType,\n          },\n        },\n        `Adding condition to connection field '${field.name}' of '${Self.name}'`\n      );\n    }\n  );\n}: Plugin);\n"]}