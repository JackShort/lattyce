{"version":3,"sources":["../../src/plugins/PgRowNode.js"],"names":["base64Decode","str","Buffer","String","toString","debugSql","PgRowNode","builder","hook","object","build","context","addNodeFetcherForTypeName","pgIntrospectionResultsByKind","introspectionResultsByKind","pgSql","sql","gql2pg","pgQueryFromResolveData","queryFromResolveData","pgOmit","omit","scope","isPgRowType","pgIntrospection","table","namespace","sqlFullTableName","identifier","name","attributes","attribute","filter","attr","classId","id","primaryKeyConstraint","constraint","con","type","primaryKeys","keyAttributeNums","map","num","data","identifiers","pgClient","parsedResolveInfoFragment","ReturnType","resolveData","length","Error","query","undefined","forEach","key","idx","where","fragment","getTableAlias","typeModifier","text","values","compile","enabled","rows","row","fields","nodeIdFieldName","extend","parseResolveInfo","pgGetGqlTypeByTypeIdAndModifier","getNodeType","graphql","GraphQLNonNull","GraphQLID","inflection","isRootQuery","fieldWithHooks","class","reduce","memo","TableType","fieldName","tableNode","getDataFromParsedResolveInfoFragment","description","args","resolve","parent","resolveInfo","nodeId","alias","JSON","parse","NodeTypeByAlias","e","isPgNodeQuery","pgFieldIntrospection"],"mappings":"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","file":"PgRowNode.js","sourcesContent":["// @flow\nimport type { Plugin } from \"graphile-build\";\nimport debugFactory from \"debug\";\n\nconst base64Decode = str => new Buffer(String(str), \"base64\").toString(\"utf8\");\nconst debugSql = debugFactory(\"graphile-build-pg:sql\");\n\nexport default (async function PgRowNode(builder) {\n  builder.hook(\"GraphQLObjectType\", (object, build, context) => {\n    const {\n      addNodeFetcherForTypeName,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      gql2pg,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgOmit: omit,\n    } = build;\n    const {\n      scope: { isPgRowType, pgIntrospection: table },\n    } = context;\n    if (!isPgRowType || !table.namespace || omit(table, \"read\")) {\n      return object;\n    }\n    const sqlFullTableName = sql.identifier(table.namespace.name, table.name);\n    const attributes = introspectionResultsByKind.attribute.filter(\n      attr => attr.classId === table.id\n    );\n    const primaryKeyConstraint = introspectionResultsByKind.constraint\n      .filter(con => con.classId === table.id)\n      .filter(con => con.type === \"p\")[0];\n    if (!primaryKeyConstraint) {\n      return object;\n    }\n    const primaryKeys =\n      primaryKeyConstraint &&\n      primaryKeyConstraint.keyAttributeNums.map(\n        num => attributes.filter(attr => attr.num === num)[0]\n      );\n    addNodeFetcherForTypeName(\n      object.name,\n      async (\n        data,\n        identifiers,\n        { pgClient },\n        parsedResolveInfoFragment,\n        ReturnType,\n        resolveData\n      ) => {\n        if (identifiers.length !== primaryKeys.length) {\n          throw new Error(\"Invalid ID\");\n        }\n        const query = queryFromResolveData(\n          sqlFullTableName,\n          undefined,\n          resolveData,\n          {},\n          builder => {\n            primaryKeys.forEach((key, idx) => {\n              builder.where(\n                sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                  key.name\n                )} = ${gql2pg(\n                  identifiers[idx],\n                  primaryKeys[idx].type,\n                  primaryKeys[idx].typeModifier\n                )}`\n              );\n            });\n          }\n        );\n        const { text, values } = sql.compile(query);\n        if (debugSql.enabled) debugSql(text);\n        const {\n          rows: [row],\n        } = await pgClient.query(text, values);\n        return row;\n      }\n    );\n    return object;\n  });\n\n  builder.hook(\"GraphQLObjectType:fields\", (fields, build, context) => {\n    const {\n      nodeIdFieldName,\n      extend,\n      parseResolveInfo,\n      pgGetGqlTypeByTypeIdAndModifier,\n      pgIntrospectionResultsByKind: introspectionResultsByKind,\n      pgSql: sql,\n      gql2pg,\n      getNodeType,\n      graphql: { GraphQLNonNull, GraphQLID },\n      inflection,\n      pgQueryFromResolveData: queryFromResolveData,\n      pgOmit: omit,\n    } = build;\n    const {\n      scope: { isRootQuery },\n      fieldWithHooks,\n    } = context;\n    if (!isRootQuery || !nodeIdFieldName) {\n      return fields;\n    }\n    return extend(\n      fields,\n      introspectionResultsByKind.class\n        .filter(table => !!table.namespace)\n        .filter(table => !omit(table, \"read\"))\n        .reduce((memo, table) => {\n          const TableType = pgGetGqlTypeByTypeIdAndModifier(\n            table.type.id,\n            null\n          );\n          const sqlFullTableName = sql.identifier(\n            table.namespace.name,\n            table.name\n          );\n          if (TableType) {\n            const attributes = introspectionResultsByKind.attribute.filter(\n              attr => attr.classId === table.id\n            );\n            const primaryKeyConstraint = introspectionResultsByKind.constraint\n              .filter(con => con.classId === table.id)\n              .filter(con => con.type === \"p\")[0];\n            if (!primaryKeyConstraint) {\n              return memo;\n            }\n            const primaryKeys =\n              primaryKeyConstraint &&\n              primaryKeyConstraint.keyAttributeNums.map(\n                num => attributes.filter(attr => attr.num === num)[0]\n              );\n            const fieldName = inflection.tableNode(table);\n            memo[fieldName] = fieldWithHooks(\n              fieldName,\n              ({ getDataFromParsedResolveInfoFragment }) => {\n                return {\n                  description: `Reads a single \\`${\n                    TableType.name\n                  }\\` using its globally unique \\`ID\\`.`,\n                  type: TableType,\n                  args: {\n                    [nodeIdFieldName]: {\n                      description: `The globally unique \\`ID\\` to be used in selecting a single \\`${\n                        TableType.name\n                      }\\`.`,\n                      type: new GraphQLNonNull(GraphQLID),\n                    },\n                  },\n                  async resolve(parent, args, { pgClient }, resolveInfo) {\n                    const nodeId = args[nodeIdFieldName];\n                    try {\n                      const [alias, ...identifiers] = JSON.parse(\n                        base64Decode(nodeId)\n                      );\n                      const NodeTypeByAlias = getNodeType(alias);\n                      if (NodeTypeByAlias !== TableType) {\n                        throw new Error(\"Mismatched type\");\n                      }\n                      if (identifiers.length !== primaryKeys.length) {\n                        throw new Error(\"Invalid ID\");\n                      }\n\n                      const parsedResolveInfoFragment = parseResolveInfo(\n                        resolveInfo\n                      );\n                      const resolveData = getDataFromParsedResolveInfoFragment(\n                        parsedResolveInfoFragment,\n                        TableType\n                      );\n                      const query = queryFromResolveData(\n                        sqlFullTableName,\n                        undefined,\n                        resolveData,\n                        {},\n                        builder => {\n                          primaryKeys.forEach((key, idx) => {\n                            builder.where(\n                              sql.fragment`${builder.getTableAlias()}.${sql.identifier(\n                                key.name\n                              )} = ${gql2pg(\n                                identifiers[idx],\n                                primaryKeys[idx].type,\n                                primaryKeys[idx].typeModifier\n                              )}`\n                            );\n                          });\n                        }\n                      );\n                      const { text, values } = sql.compile(query);\n                      if (debugSql.enabled) debugSql(text);\n                      const {\n                        rows: [row],\n                      } = await pgClient.query(text, values);\n                      return row;\n                    } catch (e) {\n                      return null;\n                    }\n                  },\n                };\n              },\n              {\n                isPgNodeQuery: true,\n                pgFieldIntrospection: table,\n              }\n            );\n          }\n          return memo;\n        }, {}),\n      `Adding \"row by node ID\" fields to root Query type`\n    );\n  });\n}: Plugin);\n"]}